{
    "type": [
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        3,
        3,
        0,
        1,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        2,
        0,
        1,
        0,
        1,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        3,
        0,
        1,
        2,
        0,
        1,
        2
    ],
    "data": [
        "\nR version 4.0.3 (2020-10-10) -- \"Bunny-Wunnies Freak Out\"\nCopyright (C) 2020 The R Foundation for Statistical Computing\nPlatform: x86_64-w64-mingw32/x64 (64-bit)\n\nR é um software livre e vem sem GARANTIA ALGUMA.\nVocê pode redistribuí-lo sob certas circunstâncias.\nDigite 'license()' ou 'licence()' para detalhes de distribuição.\n\nR é um projeto colaborativo com muitos contribuidores.\nDigite 'contributors()' para obter mais informações e\n'citation()' para saber como citar o R ou pacotes do R em publicações.\n\n",
        "Digite 'demo()' para demonstrações, 'help()' para o sistema on-line de ajuda,\nou 'help.start()' para abrir o sistema de ajuda em HTML no seu navegador.\nDigite 'q()' para sair do R.\n\n\nRestarting R session...\n\n",
        "> ",
        "library(treeto)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(treetop)",
        "\nAttaching package: ‘treetop’\n\n",
        "The following object is masked from ‘package:treeto’:\n\n    runApp\n\n",
        "> ",
        "shiny::runApp",
        "function (appDir = getwd(), port = getOption(\"shiny.port\"), \n    launch.browser = getOption(\"shiny.launch.browser\", \n        interactive()), host = getOption(\"shiny.host\", \n        \"127.0.0.1\"), workerId = \"\", quiet = FALSE, \n    display.mode = c(\"auto\", \"normal\", \"showcase\"), \n    test.mode = getOption(\"shiny.testmode\", FALSE)) \n{\n    on.exit({\n        handlerManager$clear()\n    }, add = TRUE)\n    if (.globals$running) {\n        stop(\"Can't call `runApp()` from within `runApp()`. If your \", \n            \"application code contains `runApp()`, please remove it.\")\n",
        "    }\n    .globals$running <- TRUE\n    on.exit({\n        .globals$running <- FALSE\n    }, add = TRUE)\n    oldOptionSet <- .globals$options\n    on.exit({\n        .globals$options <- oldOptionSet\n    }, add = TRUE)\n    shinyOptions(appToken = createUniqueId(8))\n    ops <- options(warn = max(1, getOption(\"warn\", default = 1)), \n        pool.scheduler = scheduleTask)\n    on.exit(options(ops), add = TRUE)\n    if (is.null(getShinyOption(\"cache\"))) {\n        shinyOptions(cache = MemoryCache$new())\n    }\n    appParts <- as.shiny.appobj(appDir)\n",
        "    appOps <- appParts$options\n    findVal <- function(arg, default) {\n        if (arg %in% names(appOps)) \n            appOps[[arg]]\n        else default\n    }\n    if (missing(port)) \n        port <- findVal(\"port\", port)\n    if (missing(launch.browser)) \n        launch.browser <- findVal(\"launch.browser\", launch.browser)\n    if (missing(host)) \n        host <- findVal(\"host\", host)\n    if (missing(quiet)) \n        quiet <- findVal(\"quiet\", quiet)\n    if (missing(display.mode)) \n        display.mode <- findVal(\"display.mode\", display.mode)\n",
        "    if (missing(test.mode)) \n        test.mode <- findVal(\"test.mode\", test.mode)\n    if (is.null(host) || is.na(host)) \n        host <- \"0.0.0.0\"\n    workerId(workerId)\n    if (inShinyServer()) {\n        ver <- Sys.getenv(\"SHINY_SERVER_VERSION\")\n        if (utils::compareVersion(ver, .shinyServerMinVersion) < \n            0) {\n            warning(\"Shiny Server v\", .shinyServerMinVersion, \n                \" or later is required; please upgrade!\")\n        }\n    }\n    setShowcaseDefault(0)\n    .globals$testMode <- test.mode\n",
        "    if (test.mode) {\n        message(\"Running application in test mode.\")\n    }\n    if (is.character(appDir)) {\n        desc <- file.path.ci(if (tolower(tools::file_ext(appDir)) == \n            \"r\") \n            dirname(appDir)\n        else appDir, \"DESCRIPTION\")\n        if (file.exists(desc)) {\n            con <- file(desc, encoding = checkEncoding(desc))\n            on.exit(close(con), add = TRUE)\n            settings <- read.dcf(con)\n            if (\"DisplayMode\" %in% colnames(settings)) {\n                mode <- settings[1, \"DisplayMode\"]\n",
        "                if (mode == \"Showcase\") {\n                  setShowcaseDefault(1)\n                  if (\"IncludeWWW\" %in% colnames(settings)) {\n                    .globals$IncludeWWW <- as.logical(settings[1, \n                      \"IncludeWWW\"])\n                    if (is.na(.globals$IncludeWWW)) {\n                      stop(\"In your Description file, `IncludeWWW` \", \n                        \"must be set to `True` (default) or `False`\")\n                    }\n                  }\n                  else {\n                    .globals$IncludeWWW <- TRUE\n",
        "                  }\n                }\n            }\n        }\n    }\n    if (is.null(.globals$IncludeWWW) || is.na(.globals$IncludeWWW)) {\n        .globals$IncludeWWW <- TRUE\n    }\n    display.mode <- match.arg(display.mode)\n    if (display.mode == \"normal\") {\n        setShowcaseDefault(0)\n    }\n    else if (display.mode == \"showcase\") {\n        setShowcaseDefault(1)\n    }\n    require(shiny)\n    if (is.null(port)) {\n        for (i in 1:20) {\n            if (!is.null(.globals$lastPort)) {\n                port <- .globals$lastPort\n",
        "                .globals$lastPort <- NULL\n            }\n            else {\n                while (TRUE) {\n                  port <- p_randomInt(3000, 8000)\n                  if (!port %in% c(3659, 4045, 6000, 6665:6669, \n                    6697)) {\n                    break\n                  }\n                }\n            }\n            tmp <- try(startServer(host, port, list()), silent = TRUE)\n            if (!inherits(tmp, \"try-error\")) {\n                stopServer(tmp)\n                .globals$lastPort <- port\n",
        "                break\n            }\n        }\n    }\n    on.exit({\n        .globals$onStopCallbacks$invoke()\n        .globals$onStopCallbacks <- Callbacks$new()\n    }, add = TRUE)\n    unconsumeAppOptions(appParts$appOptions)\n    if (!is.null(appParts$onStop)) \n        on.exit(appParts$onStop(), add = TRUE)\n    if (!is.null(appParts$onStart)) \n        appParts$onStart()\n    server <- startApp(appParts, port, host, quiet)\n    shinyOptions(server = server)\n    on.exit({\n        stopServer(server)\n    }, add = TRUE)\n",
        "    if (!is.character(port)) {\n        browseHost <- host\n        if (identical(host, \"0.0.0.0\")) {\n            browseHost <- \"127.0.0.1\"\n        }\n        else if (identical(host, \"::\")) {\n            browseHost <- \"::1\"\n        }\n        if (httpuv::ipFamily(browseHost) == 6L) {\n            browseHost <- paste0(\"[\", browseHost, \"]\")\n        }\n        appUrl <- paste(\"http://\", browseHost, \":\", \n            port, sep = \"\")\n        if (is.function(launch.browser)) \n            launch.browser(appUrl)\n        else if (launch.browser) \n",
        "            utils::browseURL(appUrl)\n    }\n    else {\n        appUrl <- NULL\n    }\n    callAppHook(\"onAppStart\", appUrl)\n    on.exit({\n        callAppHook(\"onAppStop\", appUrl)\n    }, add = TRUE)\n    .globals$reterror <- NULL\n    .globals$retval <- NULL\n    .globals$stopped <- FALSE\n    ..stacktraceoff..(captureStackTraces({\n        while (!.globals$stopped) {\n            ..stacktracefloor..(serviceApp())\n        }\n    }))\n    if (isTRUE(.globals$reterror)) {\n        stop(.globals$retval)\n    }\n    else if (.globals$retval$visible) \n",
        "        .globals$retval$value\n    else invisible(.globals$retval$value)\n}\n<bytecode: 0x000002b23b5e4170>\n<environment: namespace:shiny>\n\nRestarting R session...\n\n",
        "> ",
        "library(treetop)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(treetop)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(treetop)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(treetop)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(treetop)",
        "\nRestarting R session...\n\n",
        "> ",
        "library(treetop)",
        "> ",
        "treeto::runApp()",
        "Loading required package: shiny\n",
        "\nAttaching package: ‘shiny’\n\n",
        "The following object is masked from ‘package:treetop’:\n\n    runApp\n\n",
        "The following object is masked from ‘package:treeto’:\n\n    runApp\n\n",
        "\nListening on http://127.0.0.1:5455\n",
        "navbarPage is deprecated. Please use `collapsable` is deprecated; use `collapsible` instead. instead. To disable this message, run options(shiny.deprecation.messages=FALSE)\n",
        "The `format` argument to sliderInput is deprecated. Use `sep`, `pre`, and `post` instead. (Last used in version 0.10.2.2)\n",
        "\n",
        "> ",
        "install.packages(\"~/treetop_0.01.tar.gz\", repos = NULL, type = \"source\")",
        "Warning in install.packages :\n  package ‘treetop’ is in use and will not be installed\n\nRestarting R session...\n\n",
        "> ",
        "library(treetop)",
        "\nRestarting R session...\n\n"
    ]
}